services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    # ports: [ "2181:2181" ]
    volumes: [ "zookeeper_data:/bitnami/zookeeper" ]
    restart: always

  kafka:
    image: bitnami/kafka:3.7
    depends_on: [ zookeeper ]
    ports:
      # - "9092:9092" # INTERNAL
      # - "9093:9093" # EXTERNAL
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_CFG_OFFSETS_TOPIC_NUM_PARTITIONS=50
    volumes: [ "kafka_data:/bitnami/kafka" ]
    healthcheck:
      test: [ "CMD", "/opt/bitnami/kafka/bin/kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 12
    restart: always

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    depends_on:
      kafka:
        condition: service_healthy
    ports: [ "9000:9000" ]
    environment:
      - KAFKA_BROKERCONNECT=${KAFKA_BROKERCONNECT}
      - JVM_OPTS=-Xms128m -Xmx512m
    restart: always

  swap-coldkey-monitor:
    build:
      context: swap_coldkey_monitor
      dockerfile: Dockerfile
    image: swap-coldkey-monitor:latest
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - SUBTENSOR_ENDPOINT=${SUBTENSOR_ENDPOINT}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - KAFKA_PARTITIONING=${KAFKA_PARTITIONING}
      - PYTHONUNBUFFERED=1
    init: true
    restart: always

  discord-notifier:
    build:
      context: discord_notifier
      dockerfile: Dockerfile
    image: discord-notifier:latest
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - PYTHONUNBUFFERED=1
      - TEST_MODE=False
    init: true
    restart: always

  subnet-monitor:
    build:
      context: subnet_monitor
      dockerfile: Dockerfile
    image: subnet-monitor:latest
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - PYTHONUNBUFFERED=1
      - SUBTENSOR_ENDPOINT=${SUBTENSOR_ENDPOINT}
    init: true
    restart: always

  redis:
    image: redis:7-alpine
    command: [ "redis-server", "--appendonly", "yes" ]
    # ports: [ "6379:6379" ]
    volumes: [ "redis_data:/data" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ] # returns "PONG" on success
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 5s
    restart: always

  auto-staker:
    build:
      context: auto_staker
      dockerfile: Dockerfile
    image: auto-staker:latest
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - WALLET_NAME=${WALLET_NAME}
      - HOTKEY_TO_STAKE=${HOTKEY_TO_STAKE}
      - BALANCE_TO_STAKE=${BALANCE_TO_STAKE}
      - MAX_DELAY_IN_BLOCKS=${MAX_DELAY_IN_BLOCKS}
      - MIN_SPACING_IN_BLOCKS=${MIN_SPACING_IN_BLOCKS}
      - IGNORE_NETUIDS=${IGNORE_NETUIDS}
      - TEST_MODE=False
      - SUBTENSOR_ENDPOINT=${SUBTENSOR_ENDPOINT}
      - REDIS_URL=${REDIS_URL}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - REFRESH_INTERVAL_S=${REFRESH_INTERVAL_S}
    # Only read acces volume
    volumes:
      - ${HOME}/.bittensor/wallets/${WALLET_NAME}:/root/.bittensor/wallets/${WALLET_NAME}:ro
    restart: always

volumes:
  zookeeper_data:
  kafka_data:
  redis_data:
